{
  "hash": "b3fce27304930c5487c712e8509095b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\"\n---\n\n\n## Loading Data, Organizing, and Converting to a Genind Object\n\nThe data used for our analyses has been in FASTA format from the beginning, so the initial step is to load this FASTA file into R. The function used for this belongs to the `adegenet` package, and it automatically converts the data into DNAbin format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(adegenet)\nusflu.dna2 <- fasta2DNAbin(file = 'alinhamentocerto.fas')\n```\n:::\n\n\nConverts the row names (or identifiers) of the object `usflu.dna2` into character strings and stores them in the variable `isolate_name`. This is useful for manipulating and verifying the names of the isolates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nisolate_name <- as.character(rownames(usflu.dna2))\n```\n:::\n\n\nA variable `grupos` is created that assigns the value \"Grupo1\" to isolates whose names start with \"UFV\" and \"Grupo2\" to the rest of the isolates. The `startsWith` function checks whether the isolate's name begins with \"UFV\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrupos <- ifelse(startsWith(isolate_name, \"UFV\"), \"Grupo1\", \"Grupo2\")\n```\n:::\n\n\nThe function `DNAbin2genind` converts a DNAbin object into a genind object, which is used for population genetic analysis. The argument `pop = grupos` assigns the groups (previously defined as \"Grupo1\" and \"Grupo2\") to the isolates within the genind object. This enables subsequent analyses of population structure and genetic diversity based on these defined groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusflu.genind <- DNAbin2genind(x = usflu.dna2, pop = grupos)\nusflu.genind\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/// GENIND OBJECT /////////\n\n // 59 individuals; 247 loci; 532 alleles; size: 260.7 Kb\n\n // Basic content\n   @tab:  59 x 532 matrix of allele counts\n   @loc.n.all: number of alleles per locus (range: 2-4)\n   @loc.fac: locus factor for the 532 columns of @tab\n   @all.names: list of allele names for each locus\n   @ploidy: ploidy of each individual  (range: 1-1)\n   @type:  codom\n   @call: DNAbin2genind(x = usflu.dna2, pop = grupos)\n\n // Optional content\n   @pop: population of each individual (group size range: 27-32)\n```\n\n\n:::\n:::\n\n\n## Organizing the data for AMOVA\n\nThe `poppr` library, which is used for population genetic analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"poppr\")\n```\n:::\n\n\nThe variable `grupos` is a vector that defines the groups for analysis. It contains 27 individuals labeled as \"Grupo1\" and 32 individuals labeled as \"Grupo2\". `df_grupos` converts the vector `grupos` into a dataframe, which can be used as a stratification attribute (`strata`) in the genetic object (`genind`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrupos <- c(rep(\"Grupo1\", 27), rep(\"Grupo2\", 32))\ndf_grupos <- data.frame(grupos)\n```\n:::\n\n\nThis assigns the previously defined groups (`df_grupos`) to the genetic object `usflu.genind`. **This enables the analysis of population structure based on the defined groups.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstrata(usflu.genind) <- df_grupos\n```\n:::\n\n\nThe function `as.genclone` converts the genetic object `usflu.genind` into a format suitable for clonality analysis (GenClone). This is useful for detecting genetic clones within the population.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusflu.genind <- as.genclone(usflu.genind)\nusflu.genind\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThis is a genclone object\n-------------------------\nGenotype information:\n\n    26 original multilocus genotypes \n    59 haploid individuals\n   247 codominant loci\n\nPopulation information:\n\n     1 stratum - grupos\n     2 populations defined - Grupo1, Grupo2\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(strata(usflu.genind, ~grupos))  # Populations\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ngrupos\nGrupo1 Grupo2 \n    27     32 \n```\n\n\n:::\n:::\n\n\n## AMOVA\n\nThe method calculates differences in allelic content between haplotypes using a matrix of **Euclidean squared distances**, consistent with the approach used by **Arlequin**. However, analysts can customize this method according to their preferences. In this example, the `method` is set to **`ade4`**. If you choose to use another method, switch to **`pegas`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\namovac <- poppr.amova(usflu.genind, ~grupos, method = \"ade4\")\namovac\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$call\nade4::amova(samples = xtab, distances = xdist, structures = xstruct)\n\n$results\n                Df     Sum Sq  Mean Sq\nBetween samples  1   17.02833 17.02833\nWithin samples  57 2569.61574 45.08098\nTotal           58 2586.64407 44.59731\n\n$componentsofcovariance\n                                 Sigma          %\nVariations  Between samples -0.9578162  -2.170779\nVariations  Within samples  45.0809779 102.170779\nTotal variations            44.1231617 100.000000\n\n$statphi\n                          Phi\nPhi-samples-total -0.02170779\n```\n\n\n:::\n:::\n\n\nReturns the available arguments for the `poppr.amova` function, which can help understand how to configure the analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(poppr.amova)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x, hier = NULL, clonecorrect = FALSE, within = TRUE, \n    dist = NULL, squared = TRUE, freq = TRUE, correction = \"quasieuclid\", \n    sep = \"_\", filter = FALSE, threshold = 0, algorithm = \"farthest_neighbor\", \n    threads = 1L, missing = \"loci\", cutoff = 0.05, quiet = FALSE, \n    method = c(\"ade4\", \"pegas\"), nperm = 0) \nNULL\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}